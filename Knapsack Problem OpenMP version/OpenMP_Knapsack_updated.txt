This program adopted from a program written by Michael Crawford, written by Zach Goodwyn and Jerome Mueller

This program solves a user specified 0-1 knapsack problem using a brute force algorithm.

To compile and run:

	Compiling this program requires you to enable openMP. Doing this differs according to the compiler you are using.

Using g++: To compile this program using g++, you must use the -fopenmp flag, as in the following example:

[user@server]$ g++ -fopenmp -O2 openMP_Knapsack.cpp

	By default, this line will still create the default ./a.out executable. You may use any other flags you wish, such as optimization flags and the -o flag.

Using Intel Compiler: 

	Before using the Intel compiler, you must specify its source. Use the command:

[user@server]$ source /opt/intel/bin/compilervars.sh intel64

	(Note: This command can also be found in the file intel_c_compiler_notes)

	To compile using intels compiler, use the -openmp flag, as in the following:

[user@server]$ icpc -openmp openMP_Knapsack.cpp

	As a friendly reminder, recall that intel automatically uses level 2
optimizations (as opposed to g++ which will not optimize unless told). Like
g++, you may use any other relevant flags.

We have no experience running this code on Windows.


Running: This program takes two arguments
1) The file containing the specifications of the Knapsack problem(s)
2)The number of cores you wish to use

	Whether using the g++ or intel complier, simply put the argument after
the executable, such as:

[user@server]$ ./a.out set.txt 8

The input file must be of a specific format an example is shown below. Our
remarks are denoted by the // syntax, and are not part of the actual file

-------------------(file starts next line)
3 //first number is the number of knapsack problems to solve
8 // number of items for 1st problem
25 //maximum weight that can be carried for 1st problem
2 4 6 3 12 3 7 5 //values for each item for 1st problem
1 2 3 4 5 6 7 8 //Weight of each item for first problem
3 //number of items for 2nd problem
20 //maximum carryable weight for 2nd problem
14 62 27 //values of items for 2nd problem
6 17 10 //weights of items for 2nd problem
16 //number of items in 3rd problem
...
--------------------


